Video_30
FROM

Indica de dónde se deben traer los datos
Puede ayudar a hacer sentencias y filtros complejos

JOIN
Sentencia compañera que nos ayuda con el proceso de unir distintas tablas

Los diagramas de Venn
Dos conjuntos (círculos o rombos) que se tocan en algún punto
Usados para ejemplificar dónde está la intersección de conjuntos
Dependiendo del query, ayudan mucho para formular la sentencia JOIN de la manera adecuada

LEFT JOIN
RIGHT JOIN
Diferencia: lo que esta en una tabla pero no tenemos en la otra tabla

INNER JOIN
Interseccion: Lo que esta en la parte central

OUTER JOIN
Union: Trae todo, lo que se une y no se une de ambas tablas
Diferencia asimetrica: Trae lo que no tiene relacion

---
Video_31
Utilizando la sentencia FROM

LEFT JOIN
Con interseccion:
Muestra todo el contenido de la "tabla_a" sin importar que tengan o no registros asociados en la "tabla_b"
SELECT * FROM <tabla_a> LEFT JOIN <tabla_b> ON <tabla_a.key> = <tabla_b.key>;

Muestra todos los usuarios y todos sus posts
(si el usuario tiene varios posts los datos del usuario se duplicaran es posible obtener usuarios sin posts)
SELECT * FROM usuarios LEFT JOIN posts ON usuarios.id = posts.usuarios_id;

Sin interseccion:
Muestra todos los registros de "tabla_a" que no tengan registros en la "tabla_b"
SELECT *
FROM <tabla_a> LEFT JOIN <tabla_b> ON <tabla_a.key> = <tabla_b.key>
WHERE <tabla_b.key> IS NULL; ---DUDA???

Muestra todos los registros de la usuarios que no tengan ningun post
SELECT * FROM usuarios LEFT JOIN posts ON usuarios.id = posts.usuario_id WHERE posts.usuario_id IS NULL;

RIGHT JOIN
Con interseccion:
Muestra todos los registros de tabla_b tengan o no tengan relacion con la tabla_a
SELECT *
FROM <tabla_a>
RIGHT JOIN <tabla_b> ON <tabla_a.key> = <tabla_b.key>;

Muestra todos los posts aunque no tengan ningun usuario
SELECT * FROM usuarios RIGHT JOIN posts ON usuarios.id = posts.usuario_id;

Sin interseccion:
Muestra todos los registros de la tabla_b que no tengan registros en la tabla_a
SELECT *
FROM <tabla_a>
RIGHT JOIN <tabla_b> ON <tabla_a.key> = <tabla_b.key>
WHERE <tabla_b.key> IS NULL; ---DUDA???

Muestra solo los posts que no tengan usuario
SELECT * FROM usuarios RIGHT JOIN posts ON usuarios.id = posts.usuario_id WHERE posts.usuario_id IS NULL;

INNER JOIN
Muestra interseccion de ambas tablas
SELECT *
FROM <tabla_a>
INNER JOIN <tabla_b> ON <tabla_a.key> = <tabla_b.key>;

Muestra solo usuarios que si posean posts
SELECT * FROM <tabla_a> INNER JOIN <tabla_b> ON <tabla_a.key> = <tabla_b.key>;

OUTER JOIN
Union:
Muestra todos de ambas tablas
(no esta disponible en algunos manejadores de base de datos)
SELECT *
FROM <tabla_a>
FULL OUTER JOIN <tabla_b> ON <tabla_a.key> = <tabla_b.key>;

Solucion para simular FULL OUTER JOIN:
SELECT *
FROM <tabla_a>
LEFT JOIN <tabla_b> ON <tabla_a.key> = <tabla_b.key>
UNION
SELECT *
FROM <tabla_a>
RIGHT JOIN <tabla_b> ON <tabla_a.key> = <tabla_b.key>;

SELECT * FROM usuarios LEFT JOIN posts ON usuarios.id = posts.usuario_id
UNION
SELECT * FROM usuarios RIGHT JOIN posts ON usuarios.id = posts.usuario_id;

Diferencia asimetrica:
Muestra el resultado de ambas tablas pero sin mostrar los registros que estan intersectados
SELECT *
FROM <tabla_a>
LEFT JOIN <tabla_b> ON <tabla_a.key> = <tabla_b.key>
WHERE <tabla_b.key> IS NULL
UNION
SELECT *
FROM <tabla_a>
RIGHT JOIN <tabla_b> ON <tabla_a.key> = <tabla_b.key>
WHERE <tabla_b.key> IS NULL
