Video_09
Traits

Recordemos que los traits se usan para compartir funcionalidades entre clases que no tienen herencia

La funcionalidad que buscamos es para las imagenes
Debe mostrar la ubicacion (atributo src) de la imagen para mostrarla y
si no hay la imagen en el servidor, deseamos tener una generica personalizadadel API de la pagina web:
https://ui-avatars.com/api/?name=Nombre+Buscado&size=255

Nos saldremos un poco del modelo MVC:

Dentro del folder app/
Creamos la carpeta Traits
El contenido sera un nuevo trait que buscara la imagen defailt para un jobs
No olvides colocar el namespace
namespace App\Traits;

Declarando el trait:
trait NombreDelTrait
{
	public function getImage()
	{
		// code...
		return "getImage";
	}
}
(el "getImage" en el return es a modo de prueba)
Recuerda que el trait se declara como casi una clase, es decir las PrimerasLetras en mayusculas

Implementando el trait en app/Models/Job.php:
Al inicio del documento indicamos el documento que usaremos con su namespase
use App\Traits\HasDefaultImage;
y dentro de la clase, decretamos nuevamente,
use HasDefaultImage;

Como no es una herencia, no se coloca al momento de decretar, sino internamente en la clase
Esa instruccion implica que a partir de aqui, te traes las funcionalidades del trait

Debemos actualizar views/index.twig

Por ultimo actualizamos el traits a su version final:

Añadimos el pase por parametros del texto alternativo y el tamaño de la imagen
public function getImage(string $altText, int $size)
{
	// si no existe una imagen utiliza una imagen default obtenida del API con los parametros enviados
	if (!$this->image) {
		return "https://ui-avatars.com/api/?name=$altText&size=$size";
	}
	// y se tiene la imagen almacenada en la base de datos, se envia ese valor
	return $this->image;
}

Nota: Se comenta el bloque del filtro de jobs, este trabaja con un array_filter y maneja arreglos con la funcion toArray
Se deberia buscar otra alternativa para no perder dicha funcionalidad
