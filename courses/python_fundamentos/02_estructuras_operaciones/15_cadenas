Operadores de cadenas - introducción
Es tiempo de regresar a estos dos operadores aritméticos: + y *.

Ambos tienen una función secundaría. Son capaces de hacer algo más que sumar y multiplicar.

Los hemos visto en acción cuando sus argumentos son (flotantes o enteros).

Ahora veremos que son capaces también de manejar o manipular cadenas, aunque, en una manera muy específica.


Concatenación
El signo de + (más), al ser aplicado a dos cadenas, se convierte en un operador de concatenación:

string + string

Simplemente concatena (junta) dos cadenas en una. Además, puede ser utilizado más de una vez en una misma expresión.

En contraste con el operador aritmético, el operador de concatenación no es conmutativo, por ejemplo, "ab" + "ba" no es lo mismo que "ba" + "ab".

No olvides, si se desea que el signo + sea un concatenador, no un sumador, solo se debe asegurar que ambos argumentos sean cadenas.

No se pueden mezclar los tipos de datos aquí.

Este es un programa sencillo que muestra como funciona el signo + como concatenador:

nom = input("¿Me puedes dar tu nombre por favor? ")
ape = input("¿Me puedes dar tu apellido por favor? ")
print("Gracias.")
print("\nTu nombre es " + nom + " " + ape + ".")

Nota: El utilizar + para concatenar cadenas te permite construir la salida de una manera más precisa, en comparación de utilizar únicamente la función print(), aún cuando se enriquezca con los argumentos end= y sep=.

Ejecuta el código y comprueba si la salida es igual a tus predicciones.

print("+" + 10 * "-" + "+")
print(("|" + " " * 10 + "|\n") * 5, end="")
print("+" + 10 * "-" + "+")


LABORATORIO

Tiempo Estimado
5-10 minutos

Nivel de Dificultad
Fácil

Objetivos
Familiarizarse con la entrada y salida de datos en Python.
Evaluar expresiones simples.
Escenario
La tarea es completar el código para evaluar y mostrar el resultado de cuatro operaciones aritméticas básicas.

El resultado debe ser mostrado en consola.

Quizá no podrás proteger el código de un usuario que intente dividir entre cero. Por ahora, no hay que preocuparse por ello.

Prueba tu código - ¿Produce los resultados esperados?

# ingresa un valor flotante para la variable a aquí
var_a = float(input("Introduce un valor para la variable a:"))
# ingresa un valor flotante para la variable b aquí
var_b = float(input("Introduce un valor para la variable b:"))

# muestra el resultado de la suma aquí
print("El resultado de sumar a y b es: ", (var_a + var_b))
# muestra el resultado de la resta aquí
print("El resultado de restar a y b es: ", var_a - var_b)
# muestra el resultado de la multiplicación aquí
print("El resultado de multiplicar a y b es: ", var_a * var_b)
# muestra el resultado de la división aquí
print("El resultado de dividir a y b es: ", var_a / var_b)

print("\n¡Eso es todo, amigos!")




LABORATORIO

Tiempo estimado
20 minutos

Nivel de dificultad
Intermedio

Objetivos
Familiarizarse con los conceptos de números, operadores y expresiones aritméticas en Python.
Comprender la precedencia y asociatividad de los operadores de Python, así como el correcto uso de los paréntesis.
Escenario
La tarea es completar el código para poder evaluar la siguiente expresión:


El resultado debe de ser asignado a y. Se cauteloso, observa los operadores y priorízalos. Utiliza cuantos paréntesis sean necesarios.

Puedes utilizar variables adicionales para acortar la expresión (sin embargo, no es muy necesario). Prueba tu código cuidadosamente.


Datos de Prueba
Entrada de muestra: 1

Salida esperada:

y = 0.6000000000000001

Entrada de muestra: 10

Salida esperada:

y = 0.09901951266867294

Entrada de muestra: 100

Salida esperada:

y = 0.009999000199950014

Entrada de muestra: -5

Salida esperada:

y = -0.19258202567760344

Resultado:
x = float(input("Ingresa el valor para x: "))

# coloca tu código aquí
y=1/(x+1/(x+1/(x+(1/x))))

print("y =", y)

LABORATORIO

Tiempo estimado
15-20 minutos

Nivel de dificultad
Fácil

Objetivos
Mejorar la habilidad de implementar números, operadores y operaciones aritméticas en Python.
Utilizar la función print() y sus capacidades de formateo.
Aprender a expresar fenómenos del día a día en términos de un lenguaje de programación.
Escenario
La tarea es preparar un código simple para evaluar o encontrar el tiempo final de un periodo de tiempo dado, expresándolo en horas y minutos. Las horas van de 0 a 23 y los minutes de 0 a 59. El resultado debe ser mostrado en la consola.

Por ejemplo, si el evento comienza a las 12:17 y dura 59 minutos, terminará a las 13:16.

No te preocupes si tu código no es perfecto, está bien si acepta una hora invalida, lo más importante es que el código produzca una salida correcta acorde a la entrada dada.

Prueba el código cuidadosamente. Pista: utilizar el operador % puede ser clave para el éxito.

Datos de Prueba
Entrada de muestra:
12
17
59

Salida esperada: 13:16


Entrada de muestra:
23
58
642

Salida esperada: 10:40


Entrada de muestra:
0
1
2939

Salida esperada: 1:0

Respuesta:
hora = int(input("Hora de inicio (horas): "))
minuto = int(input("Minuto de inicio (minutos): "))
duracion = int(input("Duración del evento (minutos): "))

minuto += duracion % 60
hora += duracion // 60
hora += minuto // 60
minuto = minuto % 60
hora = hora % 24
print(hora, minuto, sep=":")

Puntos Clave

1. La función print() envía datos a la consola, mientras que la función input() obtiene datos de la consola.

2. La función input() viene con un parámetro inicial: un mensaje de tipo cadena para el usuario. Permite escribir un mensaje antes de la entrada del usuario, por ejemplo:

nombre = input("Ingresa tu nombre: ")
print("Hola, " + nombre + ". ¡Un gusto conocerte!")

3. Cuando la función input() es llamada o invocada, el flujo del programa se detiene, el símbolo del cursor se mantiene parpadeando (le está indicando al usuario que tome acción ya que la consola está en modo de entrada) hasta que el usuario haya ingresado un dato y/o haya presionado la tecla Enter.

NOTA

Puedes probar la funcionalidad completa de la función input() localmente en tu máquina. Por razones de optimización, se ha limitado el máximo número de ejecuciones en Edube a solo algunos segundos únicamente. Ve a Sandbox, copia y pega el código que está arriba, ejecuta el programa y espera unos segundos. Tu programa debe detenerse después de unos segundos. Ahora abre IDLE, y ejecuta el mismo programa ahí -¿Puedes notar alguna diferencia?

Consejo: La característica mencionada anteriormente de la función input() puede ser utilizada para pedirle al usuario que termine o finalice el programa. Observa el siguiente código:

nombre = input("Ingresa tu nombre: ")
print("Hola, " + nombre + ". ¡Un gusto conocerte!")

print("\nPresiona la tecla Enter para finalizar el programa.")
input()
print("FIN.")

3. El resultado de la función input() es una cadena. Se pueden unir cadenas unas con otras a través del operador de concatenación (+). Observa el siguiente código:

num1 = input("Ingresa el primer número: ") # Ingresa 12
num2 = input("Ingresa el segundo número: ") # Ingresa 21

print(num1 + num2) # el programa regresa 1221

4. También se pueden multiplicar (* - replicación) cadenas, por ejemplo:

miEntrada = ("Ingresa Algo: ") # Ejemplo: hola
print(miEntrada * 3) # Salida esperada: holaholahola




Ejercicio 1

¿Cuál es la salida del siguiente código?

x = int(input("Ingresa un número: ")) #  el usuario ingresa un 2
print(x * "5")

Revisar
55

Ejercicio 2

¿Cuál es la salida esperada del siguiente código?

x = input("Ingresa un número: ") # el usuario ingresa un 2
print(type(x))

Revisar
<class 'str'>
