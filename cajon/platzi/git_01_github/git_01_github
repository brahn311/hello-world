Curso profesional de Git y GitHub

Fecha de Inicio:
Fecha de Finalizacion:

TEMARIO:
1. Introducción a Git
	01	¿Qué es Git?
	02	¿Por qué usar un sistema de control de versiones como Git?
	03	Instalando Git y GitBash en Windows ----------------------------- Visto
	04	Instalando Git en OSX
	05	Instalando Git en Linux
	06	Editores de código, archivos binarios y de texto plano
	07	Introducción a la terminal y línea de comandos
2. Comandos básicos en Git
	08	¿Qué es staging, repositorios y cuál es el ciclo básico de trabajo en GitHub?
	09	¿Qué es un Branch (rama) y cómo funciona un Merge en Git?
	10	Crea un repositorio de Git y haz tu primer commit
	11	Analizar cambios en los archivos de tu proyecto con Git
	12	Volver en el tiempo en nuestro repositorio utilizando branches y checkout
3. Flujo de trabajo básico en Git
	13	Flujo de trabajo básico con un repositorio remoto
	14	Introducción a las ramas o branches de Git
	15	Fusión de ramas con Git merge
	16	Solución de conflictos al hacer un merge
4. Trabajando con repositorios remotos en Github
	17	Uso de GitHub
	18	Cómo funcionan las llaves públicas y privadas
	19	Configura tus llaves SSH en local
	20	Conexión a GitHub con SSH
	21	Tags y versiones en Git y GitHub
	22	Manejo de ramas en GitHub
	23	Configurar múltiples colaboradores en un repositorio de GitHub
5. Flujos de trabajo profesionales
	24	Flujo de trabajo profesional: Haciendo merge de ramas de desarrollo a master
	25	Flujo de trabajo profesional con Pull requests
	26	Utilizando Pull Requests en GitHub
	27	Creando un Fork, contribuyendo a un repositorio
	28	Haciendo deployment a un servidor
	29	Hazme un pull request
	30	Ignorar archivos en el respositorio con .gitignore
	31	Readme.md es una excelente práctica
	32	Tu sitio web público con GitHub Pages
6. Multiples entornos de trabajo
	33	Git Rebase: Reorganizando el trabajo realizado
	34	Git Stash: Guardar cambios en memoria y recuperarlos después
	35	Git Clean: Limpiar tu proyecto de archivos no deseados
	36	Git cherry-pick: Traer commits viejos al head de un branch
7. Comandos en Git para casos de emergencia
	37	Reconstruír commits en Git con amend
	38	Git Reset y Reflog: Úsese en caso de emergencia
	39	Buscar en archivos y commits de Git con Grep y log
8. Bonus
	40	Comandos y recursos colaborativos en Git y Github
	41	Tu futuro con Git y Github

------------------------------------------------------------------------- Resolver
------------------------------------------------------------------------- Avance
------------------------------------------------------------------------- Visto
