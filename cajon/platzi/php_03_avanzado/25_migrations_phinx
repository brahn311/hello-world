Video_25
Migraciones de bases de datos

Cuando cambiamos de entorno, y trabajamos en una maquina distinta
Suele ocurrir que no tenemos las base de datos en el entorno nuevo

Entonces tenemos la necesidad de crear de cero la base de datos ese nuevo entorno

Aquí es donde entra en juego la:

Migración de bases de datos
Nos permite crear ciertos archivos y llevar un control sobre cómo va cambiando
Por si en un futuro cambiamos de máquina o entorno, podremos recrearla de manera sencilla

Usaremos un proyecto llamado:
Phinx 
https://phinx.org/

Para empezar en nuestro codigo:

Modificamos nuestras variables
.env
Para habilitar el debug:
DEBUG=true

Instalamos phinx con composer:
composer require robmorgan/phinx

Para ejecutarlo podemos desde consola acceder a:
$ vendor/bin/phinx
Nos mostrala la documentacion y la ayuda

Los comandos que usaremos son:
- create:	Comando para crear una nueva migración.
- init:		Inicializará nuestra app para poder usar migraciones.
- migrate:	Ejecuta las migraciones en nuestra base de datos.
- rollback:	Deshace una migración.

En el archivo:
phinx.yml
Encontramos las rutas donde existirán las migraciones, con sus nombres y diferentes configuraciones en caso de que queramos poder tener la base de datos en diferentes entornos

Para continuar usamos:
$ vendor/bin/phinx init .
Te indica que se creo el archivo 
./phinx.yml

En el archivo phinx.yml encontramos las rutas donde existirán las migraciones
Con sus nombres y diferentes configuraciones en caso de que queramos poder tener la base de datos en diferentes entornos

Modificaremos los valores de:
development

Ahora necesitamos crear la siguiente ruta:
./db/migrations

Al crear una tabla
Ahora usaremos el comando:
$ vendor/bin/phinx create CreateJobsTable
Su nombre deberá tener el formato que tienen los nombres de clase (con las mayúsculas iniciales)
Porque a la final lo que hará Phinx será formar una clase

Esto crea un nuevo archivo en la carpeta de migraciones
El cual el contendio sera la creacion de una clase
Dentro tendra el metodo 
public function change(){ }

En este metodo crearemos la primera tabla:
$table = $this->table('jobs');
$table->addColumn('title', 'string')
	->addColumn('description', 'string')
	->addColumn('monts', 'integer')
	->addColumn('image', 'string')
	->addColumn('created_at', 'datetime')
	->addColumn('updated_at', 'datetime')
	->addColumn('deleted_at', 'datetime')
	->create();
	
Ahora cuando ejecutemos con el comando:
$ vendor\bin\phinx migrate
Tendremos nuestras tablas en nuestro servidor

Tambien crea una tabla adicional:
phinxlog
  version bigint NOT NULL,
  migration_name character varying(100),
  start_time timestamp without time zone,
  end_time timestamp without time zone,
  breakpoint boolean NOT NULL DEFAULT false,

El cual gestiona el control de las versiones de las migraciones
Permitiendo actualizar tu version de base de datos comparando las migraciones

Puedes deshacer Usando el comando:
$ vendor\bin\phinx rollback
Para regresar las migraciones

RETO:
Crear las migraciones para la tabla de usuario


