Introduccion a PHP

Fecha de Inicio: 28/03/2019

TEMARIO:

1- Introducción a PHP
	01	1:00 min	Presentación del curso													https://platzi.com/clases/1338-php/12913-presentacion-del-curso8561/
	02	4:00 min	¿Qué es PHP?															https://platzi.com/clases/1338-php/12914-que-es-php4446/
	03	11:00 min	Setup y Herramientas													https://platzi.com/clases/1338-php/12915-setup-y-herramientas/
2- Conceptos Básicos de PHP
	04	2:00 min	Revisando el template que usaremos										https://platzi.com/clases/1338-php/12916-revisando-el-template-que-usaremos/
	05	5:00 min	Sintaxis de PHP															https://platzi.com/clases/1338-php/12917-sintaxis-de-php/
	06	9:00 min	Variables tipos de datos y cadenas										https://platzi.com/clases/1338-php/12918-variables-tipos-de-datos-y-cadenas/
	07	Articulo	Tipos de Datos en PHP													https://platzi.com/clases/1338-php/12919-tipos-de-datos-en-php/
	08	10:00 min	Arreglos																https://platzi.com/clases/1338-php/12920-arreglos5547/
	09	Articulo	Ejercicios Arreglos -----------------------------------	Resolver		https://platzi.com/clases/1338-php/12921-ejercicios-arreglos/
	10	13:00 min	Condicionales y Ciclos													https://platzi.com/clases/1338-php/12922-condicionales-y-ciclos/
	11	Articulo	While vs. Do While														https://platzi.com/clases/1338-php/12923-while-vs-do-while/
	12	14:00 min	Operadores, Condicionales, Continue y Break								https://platzi.com/clases/1338-php/12924-operadores-condicionales-continue-y-break/
	13	Articulo	Operadores																https://platzi.com/clases/1338-php/12925-operadores3250/
	14	Articulo	Ejercicios Operadores ---------------------------------	Resolver		https://platzi.com/clases/1338-php/12926-ejercicios-operadores/
	15	13:00 min	Funciones																https://platzi.com/clases/1338-php/12927-funciones9167/
	16	8:00 min	Agregando archivos externos												https://platzi.com/clases/1338-php/12928-agregando-archivos-externos/
3- Programación Orientada a Objetos
	17	13:00 min	Programación Orientada a Objetos										https://platzi.com/clases/1338-php/12929-programacion-orientada-a-objetos1172/
	18	10:00 min	Constructor y Métodos ---------------------------------	Investigar		https://platzi.com/clases/1338-php/12930-constructor-y-metodos/
	19	17:00 min	Herencia																https://platzi.com/clases/1338-php/12931-herencia4055/
	20	2:00 min	Herencia y polimorfismo													https://platzi.com/clases/1338-php/16406-herencia-y-polimorfismo9153/
	21	8:00 min	Interfaces																https://platzi.com/clases/1338-php/12932-interfaces6240/
	22	9:00 min	Namespaces																https://platzi.com/clases/1338-php/12933-namespaces8948/
4- Herramientas para Proyectos PHP
	23	2:00 min	PSR y PHPFIG														*	https://platzi.com/clases/1338-php/12934-psr-y-phpfig/
	24	9:00 min	Composer															*	https://platzi.com/clases/1338-php/12935-composer/ 
5- Bases de Datos
	25	3:00 min	Introducción a las Bases de Datos 									?	https://platzi.com/clases/1338-php/12936-introduccion-a-las-bases-de-datos/
	26	3:00 min	ORM																	*	https://platzi.com/clases/1338-php/12937-orm/
	27	10:00 min	Formularios															?	https://platzi.com/clases/1338-php/12938-formularios7301/
	28	15:00 min	Eloquent															*	https://platzi.com/clases/1338-php/12939-eloquent8724/
	29	5:00 min	Listar registros de la base de datos con Eloquent					*	https://platzi.com/clases/1338-php/12940-listar-registros-de-la-base-de-datos-con-eloquent/
	30	22:00 min	Insertar datos en MySql con PHP	----------------------- Resolver	*	https://platzi.com/clases/1338-php/12941-insertar-datos-en-mysql-con-php/
6- Estructura/Arquitectura de una applicacion web
	31	12:00 min	Front Controller													*	https://platzi.com/clases/1338-php/12942-front-controller/
	32	14:00 min	PSR7																*	https://platzi.com/clases/1338-php/12943-psr7/
--------------------------------------------------------------------------- Avance
	33	10:00 min	Router																*	https://platzi.com/clases/1338-php/12944-router/
	34	12:00 min	MVC, Creando Controllers											*	https://platzi.com/clases/1338-php/12945-mvc-creando-controllers/
	35	10:00 min	MVC Reestructurando Vistas y Controladores							*	https://platzi.com/clases/1338-php/12946-mvc-reestructurando-vistas-y-controladores/
	36	9:00 min	MVC Controller de la entidad Job									*	https://platzi.com/clases/1338-php/12983-mvc-controller-de-la-entidad-job/
7- Template engines
	37	4:00 min	Template engines													*	https://platzi.com/clases/1338-php/12984-template-engines/
	38	13:00 min	Twig																*	https://platzi.com/clases/1338-php/12985-twig/
	39	11:00 min	Templates con Twig													*	https://platzi.com/clases/1338-php/12986-templates-con-twig/
	40	7:00 min	Extendiendo Templates con Twig										*	https://platzi.com/clases/1338-php/12987-extendiendo-templates-con-twig/
---------------------------------------------------------------------------	Visto
8- Validaciones
	41	15:00 min	Validaciones														*	https://platzi.com/clases/1338-php/12991-validaciones/
9- Subida de archivos
	42	13:00 min	Ejemplo de subida de archivos										*	https://platzi.com/clases/1338-php/12988-ejemplo-de-subida-de-archivos/
	43	Articulo	Tips de seguridad para subir archivos en PHP							https://platzi.com/clases/1338-php/12989-tips-de-seguridad-para-subir-archivos-en-php/
10- Autenticación de usuarios y manejo de sesiones
	44	2:00 min	Reto. Creación de usuarios											*	https://platzi.com/clases/1338-php/12993-reto-creacion-de-usuarios/
	45	16:00 min	Autenticando usuarios												*	https://platzi.com/clases/1338-php/12990-autenticando-usuarios/
	46	10:00 min	Formulario de Login													*	https://platzi.com/clases/1338-php/12992-formulario-de-login/
	47	14:00 min	Manejo de sesiones													*	https://platzi.com/clases/1338-php/12994-manejo-de-sesiones6416/
11 -Liberación de código/release
	48	8:00 min	Variables de entorno												*	https://platzi.com/clases/1338-php/12995-variables-de-entorno/
	49	6:00 min	Deploy en Heroku													*	https://platzi.com/clases/1338-php/12996-deploy-en-heroku/
	50	Articulo	Instalación de pgAdmin													https://platzi.com/clases/1338-php/12997-instalacion-de-pgadmin/
	51	6:00 min	Creando la base de datos en Heroku									*	https://platzi.com/clases/1338-php/12998-creando-la-base-de-datos-en-heroku/
	52	1:00 min	Conclusiones del curso												*	https://platzi.com/clases/1338-php/12999-conclusiones-del-curso1287/

---
ANOTACIONES:

---
Video_01
Presentacion del curso

---
Video_02
Que es PHP ?

Lenguaje de proposito general de alto nivel
Pensado y orientado a aplicaciones WEB
Lenguaje Interpretado (necesitas instalar un interprete) lanzando la salida al cliente
Multiplataforma
Opensource
Integraciones con bases de datos y otros protocolos

Que no es?
No es compilado
Puedes desarrollar otro tipo de aplicaciones como para android o de escritorio, pero no seria el mas adecuado.

---
Video_03
Setup y herramientas

Preparando el entorno de programacion

Entorno a usar en el curso:
XAMPP (solo es para desarrollo y no pensado para ambientes de produccion)
Apache
MariaDB (derivado de MySQL)
PHP
Perl

PHP USADO: 7.2.8

Para LINUX:
Descargar desde Xampp
Abrir terminal:
	$ cd Descargas
	$ chmod 755 xampp-linux-*-installer.run
	$ sudo ./xampp-linux-*-installer.run

Luego de instalar en el navegador accedes a:
localhost

Instalacion desde MAC
Instalacion desde Windows

---
Video_04
Vista a la plantilla de portafolio con css y bootstrap

Archivos (4):
style.css
READE.md
index.html

---
Video_05
Sintaxis de PHP:

El script de PHP inicia dentro de una etiqueta identificada con:
<?PHP

Para cerrar una etiqueta de script PHP termina con:
?>

El texto fuera de la etiqueta:
- Es leido como texto plano e ignorado por el interprete
- Se envia al navegador como otro texto si fuera html

Cada instruccion de PHP termina con punto y coma (;)

El interprete lee solo archivos PHP (con extension .php)
Recordar que si la pagina tiene scripts de PHP debe tener una extension .php, sino, no es leido por el interprete

---
Video_06
Variables tipos de datos y cadenas

$entero = 1;
$flotante = 1.1; /* numero decimal */
$cadena = 'cadena';
$cadena_1 = "otra cadena";

Variable se declaran iniciando con el simbolo de dolar ($) seguido del nombre
Los nombres de variables solo deben empezar con caracter de texto o piso (_) no acepta otros simbolos o numeros
Los tipos de variables en PHP no son estaticos, el tipo de la variable cambia de acuerdo al contenido.
"PHP es un lenguaje debil" debilmente tipado, es decir que no necesitas decretar la variable y su tipo antes de asignarle un valor.
PHP realiza un autocast, al momento de hacer echo de una variable con numeros, automaticamente se castea como cadena

Cadenas con comillas Simples (''):
Todo lo que se encuentre dentro de las comillas simples ('') es interpretado como texto plano.
Ejemplo:
$apellido = 'Castañeda';
$nombre = 'Carlos $apellido';
//Resultado: Carlos $apellido

Comillas Dobles (""): PHP Intenta interpretar todo lo que encuentre dentro de las comillas dobles (""), se pueden usar otras variables.
Ejemplo:
$apellido = 'Castañeda';
$nombre = "Carlos $apellido";
//Resultado: Carlos Castañeda

---
Articulo_07
Tipos de Datos en PHP

Tipo Escalares:

Booleanos (logicos):
$verdadero = true;
$falso = false;

Enteros:
Numero entero negativo o positivo (incluye el cero 0) no se declaran usan comillas simples o dobles
$negativo = -125;
$neutro = 0;
$positivo = 7763

Decimales:
float o double
/* existen problemas de precisión con los números flotantes debido a la naturaleza binaria de las computadoras */
$decimal = 12.24;  // usan un punto para los decimales

/*
(completar)
$b = 1.5e3;
$c = 7E-10;
$hexadecimal = null;
*/

Cadenas de texto:
string
Existen 4 formas de representar una cadena:
Las 2 principales son usando comillas simples o comillas dobles.
	$cadena_1 = 'texto'; // con comillas simples
		El texto será exactamente como se escribe
	$cadena_2 = "texto"; // con comillas dobles
		Permite usar caracteres de escape y expanden los nombres de las variables (sustituye el nombre por el valor de la variable
Hay 2 formas adicionales que sirven para crear cadenas de múltiples líneas:
	Heredoc
	Nowdoc
Si quieres conocer más de este tipo de dato:
http://php.net/manual/es/language.types.string.php#language.types.string.details

Tipo Compuestos:

array:
Representa una colección de valores con estructura se representa como un mapa que colecciona pares llave-valor
La llave o clave puede ser numerico generadas automaticamente (empezando en cero "0") o alfanumerico generadas por el usuario
(verificar que todos estos array tienen una coma en su ultimo indice)
$array = [ "php", "js", ];
// índices numéricos
$array = [ "curso1" => "php", "curso2" => "js", ];
// a partir de PHP 5.4
$array = array( "curso1" => "php", "curso2" => "js", );
// anterior a PHP 5.4 usando la funcion array()

object:
Representa una instancia de una clase (Programación Orientada a Objetos)
class Car
{
    function move()
    {
        echo "Going forward...";
    }
}
$myCar = new Car();
$myCar->move();

callable:
Representa a algo que puede ser “llamado”, por ejemplo una función o un método.
$firstOfArray = function(array $array) {
    if (count($array) == 0) { return null; }
    return $array[0];
};
$values = [3, 2, 1];
// Este es nuestro arreglo
echo $firstOfArray($values);
// Usamos nuestro callable y se imprime el valor 3

iterable:
(a partir de PHP 7.1)
Pseudo tipo de datos que puede ser recorrido.
function foo(iterable $iterable) {
    foreach ($iterable as $valor) {
        // ...
    }
}

Tipo Especiales:

Resource:
Representa un recurso externo, por ejemplo un archivo externo a tu aplicación
$archivo = fopen("c:\\dir\\file.txt", "r");

Null:
Variable sin valor
$no_definido = null;

---
Video_08
Arreglos

---
Articulo_09
Ejercicios Arreglos -------------------------------------------------- Pendiente

Ejercicio 1.
Escribe el código necesario para generar la cadena final usando el arreglo dado
$arreglo = [
	‘keyStr1’ => ‘lado’,
	0 => ‘ledo’,
	‘keyStr2’ => ‘lido’,
	1 => ‘lodo’,
	2 => ‘ludo’
];

Lado, ledo, lido, lodo, ludo,
decirlo al revés lo dudo.
Ludo, lodo, lido, ledo, lado,
¡Qué trabajo me ha costado!

Ejercicio 2.
Crea un arreglo que contenga como clave los nombres de 5 países y como valor otro arreglo con 3 ciudades que pertenezcan a ese país, después utiliza un ciclo foreach, para imprimir el nombre del país seguido de las ciudades que definiste:
Ejemplo:
México: Monterrey Querétaro Guadalajara
Colombia: Bogota Cartagena Medellin

Ejercicio 3.
Escribe el código necesario para encontrar los 3 números más grandes y los 3 números más bajos de la siguiente lista:

---
Video_10
Condiciones y ciclos

Realizar una condicion if else
Realizar un ciclo do While
Realizar un ciclo for

En el ejemplo desarrollado en el video se uso un "do while" () para recorrer el arreglo

---
Articulo_11
While vs. Do While

---
Video_12
Operadores, Condicionales, Continue y Break

continue:
Dentro de un ciclo for y decretado como instruccion detiene el bloque de instrucciones y continua con el siguiente iteracion

break:
Dentro de un ciclo for y decretado como instruccion termina por completo la ejecucion del ciclo y continua con el programa

---
Articulo_13
Operadores

Operadores aritmeticos:
https://www.php.net/manual/es/language.operators.arithmetic.php

+$a	Identidad	Conversión de $a a int o float según el caso.
-$a	Negación	Opuesto de $a.
$a ** $b	Exponenciación	Resultado de elevar $a a la potencia $bésima. Introducido en PHP 5.6.

Otros operadores de asignacion:
https://www.php.net/manual/es/language.operators.assignment.php
$a += $b	suma
$a -= $b	resta
$a *= $b	multiplicacion
$a /= $b	division
$a %= $b	modulo

Nota:
$a = 0;
$a += (++$a) + (++$a); // yields 5 (instead of 4)
el lado izquierdo se ejecuta de ultimo, y ++$a altera el valor de $a antes de ser usado
$a = 2 + (1) + (2) // el resultado es 5

Operadores de comparación
http://php.net/manual/es/language.operators.comparison.php
$a <=> $b		Nave espacial	Un integer es menor que, igual a, o mayor que $b
$a ?? $b ?? $c	Fusión de null	El primer operando de izquierda a derecha que exista y no sea NULL. NULL si no hay valores definidos y no son NULL.
(Ambos disponibles a partir de PHP 7)

Operadores de incremento/decremento
http://php.net/manual/es/language.operators.increment.php

Operadores lógicos
http://php.net/manual/es/language.operators.logical.php

Operadores para arrays
http://php.net/manual/es/language.operators.array.php


Estudiando la precedencia de los Operadores:
http://php.net/manual/es/language.operators.precedence.php

La precedencia de un operador indica qué tan "estrechamente" se unen dos expresiones juntas
Se refiere al comportamiento de los operadores cuando se encuentran juntos
Ordena las expreciones por prioridades agrupando por partes las instrucciones

Cuando los operadores tienen igual precedencia su asociatividad decide cómo se agrupan
Por ejemplo:
"-" tiene asociatividad a izquierda, así 1 - 2 - 3 se agrupa como (1 - 2) - 3 y se evalúa a -4.
"=" tiene asociatividad a derecha, así $a = $b = $c se agrupa como $a = ($b = $c).

Operadores de igual precedencia que no son asociativos no pueden usarse unos junto a otros
Por ejemplo: 1 < 2 > 1 es ilegal en PHP.

El uso de paréntesis incluso cuando no es estrictamente necesario, a menudo puede aumentar la legibilidad del código haciendo grupos explícitamente en lugar de confiar en la precedencia y asociatividad implícitas del operador.

Operadores en orden de precedencia:
Ordenados de mayor a menor
Los operadores en la misma línea tienen igual precedencia, en cuyo caso la asociatividad decide el agrupamiento

Asociatividad	Operadores													Información adicional
no asociativo	clone new													clone and new
izquierda	    array()
derecha		    **														    aritmética
derecha		    ++ -- ~ (int) (float) (string) (array) (object) (bool) @	tipos e incremento/decremento
no asociativo	instanceof													tipos
derecha			!															lógico
izquierda		* / %														aritmética
izquierda		+ - .														aritmética y string
izquierda		<< >>														bit a bit
no asociativo	< <= > >=													comparación
no asociativo	== != === !== <> <=>										comparación
izquierda		&															bit a bit y referencias
izquierda		^															bit a bit
izquierda		|															bit a bit
izquierda		&&															lógico
izquierda		||															lógico
derecha			??															comparación
izquierda		? :															ternario
derecha			= += -= *= **= /= .= %= &= |= ^= <<= >>=					asignación
izquierda		and															lógico
izquierda		xor															lógico
izquierda		or															lógico

Nota:
La precedencia y asociatividad solamente determinan cómo se agrupan las expresiones y no especifican un orden de evaluación
PHP no especifica (en general) el orden en que se evalúa una expresión
Debería evitar el código que se asume un orden específico de evaluación, ya que el comportamiento puede cambiar entre versiones de PHP o dependiendo de código circundante.

---
Articulo_14 ---------------------------------------------------------- Pendiente
Ejercicios Operadores

Ejercicio 1.
Calcula el resultado de 32+3 y 3(2+3). Escribe el procedimiento que empleaste en la sección de discusiones.

Ejercicio 2.
Tomando en cuenta que tenemos una variable llamada $valor, escribe en la sección de discusiones ¿Cómo sería un condicional para las siguientes opciones?
$valor es mayor que 5 pero menor que 10
$valor es mayor o igual a 0 pero menor o igual a 20
$valor es igual a “10” asegurando que el tipo de dato sea cadena
$valor es mayor a 0 pero menor a 5 o es mayor a 10 pero menor a 15

---
Video_15
Funciones

Estructura que permite encapsular codigo para poder reutilizar

Declarando una funcion:
function nombre_de_la_funcion( parametros ) {
	// bloque de instrucciones
}
Aplican las mismas reglas de nombres de variables a nombres de funciones
Si no posee parametros se deja los parentesis vacios "()"

Llamando a la funcion:
nombre_de_la_funcion(parametros);
Si la funcion requiere de parametros, y no los colocas al llamarlos la funcion genera error

return:
Termina la ejecucion de la funcion (similar a break) y tambien devuelve un valor como resultado
Frecuentemente se declara al final de la funcion

Una funcion no se puede declarar 2 veces! generara un error fatal

Curiosidades:
- Termino: scope... contexto
- funcion floor($numero_decimal) retorna el entero redondeado hacia abajo

---
Video_16
Agregando archivos externos

include('archivo.php');
include_once('archivo.php');
require('archivo.php');
require_once('archivo.php');

Nota: cuando se trabaja con archivos completamente en PHP es recomendado no usar la etiqueta de cierre

